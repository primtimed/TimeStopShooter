//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""61dba5a1-301d-4d37-9800-1c9a4c2133fd"",
            ""actions"": [
                {
                    ""name"": ""Trigger R"",
                    ""type"": ""Button"",
                    ""id"": ""fc571b1e-0146-49fe-bc86-f81313f1e9b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger L"",
                    ""type"": ""Button"",
                    ""id"": ""d3f78d21-0c1d-4fd3-a3fa-8acd691f96d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold R"",
                    ""type"": ""Button"",
                    ""id"": ""8a00adfd-e8e2-4081-b4d6-3873ab607d95"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold L"",
                    ""type"": ""Button"",
                    ""id"": ""865487a2-a9a2-4c99-a062-7bba692a28bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Walking"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c3680041-1e89-496d-aa71-95e3c1438246"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b43d8354-26f3-48c3-8bf5-656cae42617a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d10ebb58-2b85-4599-86ce-e8a274f01456"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c31e1f09-0286-4b08-bfda-1488e93915cc"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""136905b6-876d-4acc-90c3-c20acc4172f5"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5913996-6189-4545-b843-5ab068ac878c"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""586d7630-85e7-4202-8610-7ecbd81794ea"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold R"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ebe6fbd-df3e-4dc2-9f34-8b03d78cacde"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hold L"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TimeStop"",
            ""id"": ""57e3a0a6-97f0-46a9-abfb-61710bebf7ad"",
            ""actions"": [
                {
                    ""name"": ""TimeButton"",
                    ""type"": ""Button"",
                    ""id"": ""b62b6430-94b1-475d-acb3-d76133280feb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""42ce9b3c-e1bb-4291-b301-e40533cf2a9f"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TimeButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_TriggerR = m_Movement.FindAction("Trigger R", throwIfNotFound: true);
        m_Movement_TriggerL = m_Movement.FindAction("Trigger L", throwIfNotFound: true);
        m_Movement_HoldR = m_Movement.FindAction("Hold R", throwIfNotFound: true);
        m_Movement_HoldL = m_Movement.FindAction("Hold L", throwIfNotFound: true);
        m_Movement_Walking = m_Movement.FindAction("Walking", throwIfNotFound: true);
        m_Movement_Rotate = m_Movement.FindAction("Rotate", throwIfNotFound: true);
        // TimeStop
        m_TimeStop = asset.FindActionMap("TimeStop", throwIfNotFound: true);
        m_TimeStop_TimeButton = m_TimeStop.FindAction("TimeButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_TriggerR;
    private readonly InputAction m_Movement_TriggerL;
    private readonly InputAction m_Movement_HoldR;
    private readonly InputAction m_Movement_HoldL;
    private readonly InputAction m_Movement_Walking;
    private readonly InputAction m_Movement_Rotate;
    public struct MovementActions
    {
        private @InputSystem m_Wrapper;
        public MovementActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerR => m_Wrapper.m_Movement_TriggerR;
        public InputAction @TriggerL => m_Wrapper.m_Movement_TriggerL;
        public InputAction @HoldR => m_Wrapper.m_Movement_HoldR;
        public InputAction @HoldL => m_Wrapper.m_Movement_HoldL;
        public InputAction @Walking => m_Wrapper.m_Movement_Walking;
        public InputAction @Rotate => m_Wrapper.m_Movement_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @TriggerR.started += instance.OnTriggerR;
            @TriggerR.performed += instance.OnTriggerR;
            @TriggerR.canceled += instance.OnTriggerR;
            @TriggerL.started += instance.OnTriggerL;
            @TriggerL.performed += instance.OnTriggerL;
            @TriggerL.canceled += instance.OnTriggerL;
            @HoldR.started += instance.OnHoldR;
            @HoldR.performed += instance.OnHoldR;
            @HoldR.canceled += instance.OnHoldR;
            @HoldL.started += instance.OnHoldL;
            @HoldL.performed += instance.OnHoldL;
            @HoldL.canceled += instance.OnHoldL;
            @Walking.started += instance.OnWalking;
            @Walking.performed += instance.OnWalking;
            @Walking.canceled += instance.OnWalking;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @TriggerR.started -= instance.OnTriggerR;
            @TriggerR.performed -= instance.OnTriggerR;
            @TriggerR.canceled -= instance.OnTriggerR;
            @TriggerL.started -= instance.OnTriggerL;
            @TriggerL.performed -= instance.OnTriggerL;
            @TriggerL.canceled -= instance.OnTriggerL;
            @HoldR.started -= instance.OnHoldR;
            @HoldR.performed -= instance.OnHoldR;
            @HoldR.canceled -= instance.OnHoldR;
            @HoldL.started -= instance.OnHoldL;
            @HoldL.performed -= instance.OnHoldL;
            @HoldL.canceled -= instance.OnHoldL;
            @Walking.started -= instance.OnWalking;
            @Walking.performed -= instance.OnWalking;
            @Walking.canceled -= instance.OnWalking;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // TimeStop
    private readonly InputActionMap m_TimeStop;
    private List<ITimeStopActions> m_TimeStopActionsCallbackInterfaces = new List<ITimeStopActions>();
    private readonly InputAction m_TimeStop_TimeButton;
    public struct TimeStopActions
    {
        private @InputSystem m_Wrapper;
        public TimeStopActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @TimeButton => m_Wrapper.m_TimeStop_TimeButton;
        public InputActionMap Get() { return m_Wrapper.m_TimeStop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TimeStopActions set) { return set.Get(); }
        public void AddCallbacks(ITimeStopActions instance)
        {
            if (instance == null || m_Wrapper.m_TimeStopActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TimeStopActionsCallbackInterfaces.Add(instance);
            @TimeButton.started += instance.OnTimeButton;
            @TimeButton.performed += instance.OnTimeButton;
            @TimeButton.canceled += instance.OnTimeButton;
        }

        private void UnregisterCallbacks(ITimeStopActions instance)
        {
            @TimeButton.started -= instance.OnTimeButton;
            @TimeButton.performed -= instance.OnTimeButton;
            @TimeButton.canceled -= instance.OnTimeButton;
        }

        public void RemoveCallbacks(ITimeStopActions instance)
        {
            if (m_Wrapper.m_TimeStopActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITimeStopActions instance)
        {
            foreach (var item in m_Wrapper.m_TimeStopActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TimeStopActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TimeStopActions @TimeStop => new TimeStopActions(this);
    public interface IMovementActions
    {
        void OnTriggerR(InputAction.CallbackContext context);
        void OnTriggerL(InputAction.CallbackContext context);
        void OnHoldR(InputAction.CallbackContext context);
        void OnHoldL(InputAction.CallbackContext context);
        void OnWalking(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface ITimeStopActions
    {
        void OnTimeButton(InputAction.CallbackContext context);
    }
}
